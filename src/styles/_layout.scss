@use "variables" as v;

@each $name, $value in v.$lengths {
  .m-#{$name} {
    margin: $value;
  }
  .mx-#{$name} {
    margin-left: $value;
    margin-right: $value;
  }
  .my-#{$name} {
    margin-bottom: $value;
    margin-top: $value;
  }
  .mb-#{$name} {
    margin-bottom: $value;
  }
  .ml-#{$name} {
    margin-left: $value;
  }
  .mr-#{$name} {
    margin-right: $value;
  }
  .mt-#{$name} {
    margin-top: $value;
  }
}

@each $name, $value in v.$lengths {
  .p-#{$name} {
    padding: $value;
  }
  .px-#{$name} {
    padding-left: $value;
    padding-right: $value;
  }
  .py-#{$name} {
    padding-bottom: $value;
    padding-top: $value;
  }
  .pb-#{$name} {
    padding-bottom: $value;
  }
  .pl-#{$name} {
    padding-left: $value;
  }
  .pr-#{$name} {
    padding-right: $value;
  }
  .pt-#{$name} {
    padding-top: $value;
  }
}

@each $name, $value in v.$lengths {
  .square-#{$name} {
    height: $value;
    width: $value;
  }
  .h-#{$name} {
    height: $value;
  }
  .w-#{$name} {
    width: $value;
  }
}

.stack-equal-lengths {
  & > * {
    flex-basis: 0;
    flex-grow: 1;
    flex-shrink: 0;
  }
}

.basis-0 {
  flex-basis: 0;
  min-height: 0;
}

.stack-col {
  display: flex;
  flex-direction: column;

  &.stack-col-start {
    align-items: flex-start;
  }
  &.stack-col-center {
    align-items: center;
  }
  &.stack-col-fill {
    align-items: stretch;
  }
  &.stack-col-space-around {
    align-content: space-around;
  }
  &.stack-col-space-between {
    align-content: space-between;
  }
  &.stack-col-space-evenly {
    align-content: space-evenly;
  }
  &.stack-col-end {
    align-items: flex-end;
  }
  &.stack-row-start {
    justify-content: flex-start;
  }
  &.stack-row-center {
    justify-content: center;
  }
  &.stack-row-fill {
    justify-content: stretch;
  }
  &.stack-row-space-around {
    justify-content: space-around;
  }
  &.stack-row-space-between {
    justify-content: space-between;
  }
  &.stack-row-space-evenly {
    justify-content: space-evenly;
  }
  &.stack-row-end {
    justify-content: flex-end;
  }
}

.stack-row {
  display: flex;
  flex-direction: row;

  &.stack-row-start {
    align-items: flex-start;
  }
  &.stack-row-center {
    align-items: center;
  }
  &.stack-row-fill {
    align-items: stretch;
  }
  &.stack-row-space-around {
    align-content: space-around;
  }
  &.stack-row-space-between {
    align-content: space-between;
  }
  &.stack-row-space-evenly {
    align-content: space-evenly;
  }
  &.stack-row-end {
    align-items: flex-end;
  }
  &.stack-col-start {
    justify-content: flex-start;
  }
  &.stack-col-center {
    justify-content: center;
  }
  &.stack-col-fill {
    justify-content: stretch;
  }
  &.stack-col-space-around {
    justify-content: space-around;
  }
  &.stack-col-space-between {
    justify-content: space-between;
  }
  &.stack-col-space-evenly {
    justify-content: space-evenly;
  }
  &.stack-col-end {
    justify-content: flex-end;
  }
}

.stack-nowrap {
  flex-wrap: nowrap;
}
.stack-wrap-reverse {
  flex-wrap: wrap-reverse;
}
.stack-wrap {
  flex-wrap: wrap;
}

@each $name, $value in v.$lengths {
  .col-gap-#{$name} {
    column-gap: $value;
  }
  .row-gap-#{$name} {
    row-gap: $value;
  }
}

@each $name, $value in v.$lengths {
  .col-gap-#{$name} {
    column-gap: $value;
  }
  .row-gap-#{$name} {
    row-gap: $value;
  }
}

@each $n in 0, 1, 2, 3, 4, 5 {
  .grow-#{$n} {
    flex-grow: $n;
  }

  .shrink-#{$n} {
    flex-shrink: $n;
  }
}
